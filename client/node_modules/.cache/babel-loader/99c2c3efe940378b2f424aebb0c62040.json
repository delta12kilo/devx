{"ast":null,"code":"var _jsxFileName = \"/home/imkrishna/Downloads/Dev-X/client/src/components/profile/ProfileGithub.js\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRepos } from '../../actions/profile';\nimport Spinner from '../layout/spinner';\n\nconst ProfileGithub = ({\n  username,\n  getRepos,\n  repos\n}) => {\n  useEffect(() => {\n    getRepos(username);\n  }, [getRepos]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"profile-github\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-primary my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, \"Github Repos\"), repos === null ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 31\n    }\n  }) : repos.map(repo => /*#__PURE__*/React.createElement(\"div\", {\n    key: repo._id,\n    className: \"repo bg-white p-1 my-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 37\n    }\n  }, repo.name)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 33\n    }\n  }, repo.description)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 37\n    }\n  }, \"Stars : \", repo.stargazers_count), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 37\n    }\n  }, \"Watchers : \", repo.watchers_count), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"badge badge-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 37\n    }\n  }, \"Forks : \", repo.forks_count))))));\n};\n\nProfileGithub.propTypes = {\n  getRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, {\n  getRepos\n})(ProfileGithub);","map":{"version":3,"sources":["/home/imkrishna/Downloads/Dev-X/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","PropTypes","connect","getRepos","Spinner","ProfileGithub","username","repos","map","repo","_id","html_url","name","description","stargazers_count","watchers_count","forks_count","propTypes","func","isRequired","array","string","mapStateToProps","state","profile"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYH,EAAAA,QAAZ;AAAsBI,EAAAA;AAAtB,CAAD,KAAmC;AACrDP,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,QAAQ,CAACG,QAAD,CAAR;AACH,GAFQ,EAEN,CAACH,QAAD,CAFM,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEKI,KAAK,KAAK,IAAV,gBAAiB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjB,GACGA,KAAK,CAACC,GAAN,CAAUC,IAAI,iBAEN;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACC,GAAf;AAAoB,IAAA,SAAS,EAAC,wBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,IAAI,EAAED,IAAI,CAACE,QAAd;AAAwB,IAAA,MAAM,EAAC,QAA/B;AAAwC,IAAA,GAAG,EAAC,qBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,IAAI,CAACG,IADV,CADJ,CADJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,IAAI,CAACI,WAAT,CANJ,CADJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACaJ,IAAI,CAACK,gBADlB,CADJ,eAII;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACgBL,IAAI,CAACM,cADrB,CAJJ,eAOI;AAAI,IAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACaN,IAAI,CAACO,WADlB,CAPJ,CADJ,CATJ,CAFR,CAHR,CADJ;AAiCH,CAtCD;;AAwCAX,aAAa,CAACY,SAAd,GAA0B;AACtBd,EAAAA,QAAQ,EAAEF,SAAS,CAACiB,IAAV,CAAeC,UADH;AAEtBZ,EAAAA,KAAK,EAAEN,SAAS,CAACmB,KAAV,CAAgBD,UAFD;AAGtBb,EAAAA,QAAQ,EAAEL,SAAS,CAACoB,MAAV,CAAiBF;AAHL,CAA1B;;AAMA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAC9BhB,EAAAA,KAAK,EAAEgB,KAAK,CAACC,OAAN,CAAcjB;AADS,CAAL,CAA7B;;AAKA,eAAeL,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA;AAAF,CAAlB,CAAP,CAAuCE,aAAvC,CAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport { getRepos } from '../../actions/profile';\nimport Spinner from '../layout/spinner';\n\nconst ProfileGithub = ({ username, getRepos, repos }) => {\n    useEffect(() => {\n        getRepos(username);\n    }, [getRepos]);\n\n    return (\n        <div className=\"profile-github\">\n            <h2 className=\"text-primary my-1\">Github Repos</h2>\n            {repos === null ? <Spinner /> : (\n                repos.map(repo =>\n                    (\n                        <div key={repo._id} className=\"repo bg-white p-1 my-1\">\n                            <div>\n                                <h4>\n                                    <a href={repo.html_url} target='_blank' rel='noopener noreferrer'>\n                                        {repo.name}\n                                    </a>\n                                </h4>\n                                <p>{repo.description}</p>\n                            </div>\n                            <div>\n                                <ul>\n                                    <li className='badge badge-primary'>\n                                        Stars : {repo.stargazers_count}\n                                    </li>\n                                    <li className='badge badge-dark'>\n                                        Watchers : {repo.watchers_count}\n                                    </li>\n                                    <li className='badge badge-light'>\n                                        Forks : {repo.forks_count}\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    ))\n            )}\n        </div>\n    );\n}\n\nProfileGithub.propTypes = {\n    getRepos: PropTypes.func.isRequired,\n    repos: PropTypes.array.isRequired,\n    username: PropTypes.string.isRequired,\n\n};\nconst mapStateToProps = state => ({\n    repos: state.profile.repos\n}\n);\n\nexport default connect(mapStateToProps, { getRepos })(ProfileGithub)\n"]},"metadata":{},"sourceType":"module"}